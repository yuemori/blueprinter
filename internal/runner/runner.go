package runner

import (
	"context"
	"io"
	"os"
	"text/template"

	"github.com/yuemori/blueprinter/internal/parser"
	"github.com/yuemori/blueprinter/internal/resolver"
)

var DefaultTemplate = `//go:build !skip_blueprinter

// Code generated by blueprinter. DO NOT EDIT.

package {{ .Package }}

import ({{ range .Imports }}
	{{ . }}
{{- end }}
)

{{ range $pkg, $decls := .PublicDecls -}}
// {{ $pkg -}}
{{range $decls}}
func ({{.Receiver}}) {{.FuncName}}() {{.FuncReturn}} {
{{.FuncImpl}}
}
{{ end}}
{{- end}}

{{- range $pkg, $decls := .PrivateDecls}}
// {{ $pkg -}}
{{range $decls}}
func ({{.Receiver}}) {{.FuncName}}() {{.FuncReturn}} {
{{.FuncImpl}}
}
{{ end}}
{{- end}}
`

type Config struct {
	Template         string
	Dest             io.Writer
	WorkDir          string
	Globs            []string
	Ignores          []string
	ContainerName    string
	ContainerPackage string
}

func Run(cfg *Config) []error {
	ctx := context.Background()

	cache, errs := parser.Parse(ctx, cfg.WorkDir, os.Environ(), cfg.Globs, cfg.Ignores)
	if errs != nil {
		return errs
	}

	data, err, errs := resolver.Resolve(cache, cfg.ContainerName, cfg.ContainerPackage)
	if err != nil {
		return []error{err}
	}
	if errs != nil {
		return errs
	}

	t, err := template.New("provider").Parse(cfg.Template)
	if err != nil {
		return []error{err}
	}

	if err := t.Execute(cfg.Dest, data); err != nil {
		return []error{err}
	}

	return nil
}
